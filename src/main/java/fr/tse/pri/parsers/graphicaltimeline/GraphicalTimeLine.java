package fr.tse.pri.parsers.graphicaltimeline;

/* Generated By:JavaCC: Do not edit this line. GraphicalTimeLine.java */
/** Simple brace matcher. */
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.BlockingQueue;

import fr.tse.pri.info.InfoDate;

public class GraphicalTimeLine implements GraphicalTimeLineConstants {
	static InfoDate info = new InfoDate();
	static BlockingQueue<Object> outqueue = new LinkedBlockingQueue<Object>();
	static double start = 0;
	static double end = 0;
	static String title ="";
	static String page ="";
	/** Main entry point. */
	public static void main(String args[]) throws ParseException {
		GraphicalTimeLine parser = new GraphicalTimeLine(System.in);
		parser.Start();
	}

	public void setPageTitle(String page){
		this.page = page;
	}

	public void setOutQueue(BlockingQueue<Object> listInfo){
		this.outqueue = listInfo;
	}

	/** Root production. */
	final public void Start() throws ParseException {
		title();
		label_1:
			while (true) {
				if (jj_2_1(3)) {
					fromtotext();
				} else if (jj_2_2(3)) {
					atandtextat();
				} else {
					jj_consume_token(-1);
					throw new ParseException();
				}
				if (jj_2_3(3)) {
					;
				} else {
					break label_1;
				}
			}
	}

	final public void fromtotext() throws ParseException {
		info = new InfoDate();
		info.settitlePage(page);
		if (title.equals("")){
			info.setType(1);
		} else {
			info.setType(3);
			info.settitleTimeline(title);
		}
		from();
		to();
		if (jj_2_4(3)) {
			text();
		} else {
			;
		}
		if (info.getLink() != null){
			outqueue.add(info);
		}
	}

	final public void atandtextat() throws ParseException {
		info = new InfoDate();
		info.settitlePage(page);
		if (title.equals("")){
			info.setType(2);
		} else {
			info.setType(4);
			info.settitleTimeline(title);
		}
		if (jj_2_5(3)) {
			at();
			textat();
		} else if (jj_2_6(3)) {
			textat();
			at();
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		if (info.getLink() != null){
			outqueue.add(info);
		}
	}

	final public void title() throws ParseException {
		Token t;
		jj_consume_token(ODOUBLE_START);
		t = jj_consume_token(WORDS_START);
		title = new String(t.image);
		if (jj_2_7(3)) {
			jj_consume_token(OR_START);
			jj_consume_token(WORDS_START);
			jj_consume_token(CDOUBLE_START);
		} else {
			;
		}
	}

	final public void from() throws ParseException {
		Token t;
		t = jj_consume_token(DATEALL_FROM);
		info.setbeginDate(new String(t.image));
	}

	final public void to() throws ParseException {
		Token t;
		t = jj_consume_token(DATEALL_TO);
		info.setendDate(new String(t.image));
	}

	final public void text() throws ParseException {
		Token t;
		t = jj_consume_token(WORDS_TEXT_IN);
		info.setLink(new String(t.image));
		if (jj_2_8(3)) {
			jj_consume_token(OR_TEXT_IN);
		} else {
			;
		}
		if (jj_2_9(3)) {
			jj_consume_token(WORDS_TEXT_IN);
		} else {
			;
		}
	}

	final public void at() throws ParseException {
		Token t;
		t = jj_consume_token(DATEALL_AT);
		info.setatDate(new String(t.image));
	}

	final public void textat() throws ParseException {
		Token t;
		t = jj_consume_token(WORDS_TEXTAT_IN);
		info.setLink(new String(t.image));
		jj_consume_token(CDOUBLE_TEXTAT_IN);
	}

	private boolean jj_2_1(int xla) {
		jj_la = xla; jj_lastpos = jj_scanpos = token;
		try { return !jj_3_1(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(0, xla); }
	}

	private boolean jj_2_2(int xla) {
		jj_la = xla; jj_lastpos = jj_scanpos = token;
		try { return !jj_3_2(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(1, xla); }
	}

	private boolean jj_2_3(int xla) {
		jj_la = xla; jj_lastpos = jj_scanpos = token;
		try { return !jj_3_3(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(2, xla); }
	}

	private boolean jj_2_4(int xla) {
		jj_la = xla; jj_lastpos = jj_scanpos = token;
		try { return !jj_3_4(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(3, xla); }
	}

	private boolean jj_2_5(int xla) {
		jj_la = xla; jj_lastpos = jj_scanpos = token;
		try { return !jj_3_5(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(4, xla); }
	}

	private boolean jj_2_6(int xla) {
		jj_la = xla; jj_lastpos = jj_scanpos = token;
		try { return !jj_3_6(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(5, xla); }
	}

	private boolean jj_2_7(int xla) {
		jj_la = xla; jj_lastpos = jj_scanpos = token;
		try { return !jj_3_7(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(6, xla); }
	}

	private boolean jj_2_8(int xla) {
		jj_la = xla; jj_lastpos = jj_scanpos = token;
		try { return !jj_3_8(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(7, xla); }
	}

	private boolean jj_2_9(int xla) {
		jj_la = xla; jj_lastpos = jj_scanpos = token;
		try { return !jj_3_9(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(8, xla); }
	}

	private boolean jj_3_2() {
		if (jj_3R_3()) return true;
		return false;
	}

	private boolean jj_3_5() {
		if (jj_3R_5()) return true;
		if (jj_3R_6()) return true;
		return false;
	}

	private boolean jj_3_7() {
		if (jj_scan_token(OR_START)) return true;
		if (jj_scan_token(WORDS_START)) return true;
		if (jj_scan_token(CDOUBLE_START)) return true;
		return false;
	}

	private boolean jj_3_1() {
		if (jj_3R_2()) return true;
		return false;
	}

	private boolean jj_3_3() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_1()) {
			jj_scanpos = xsp;
			if (jj_3_2()) return true;
		}
		return false;
	}

	private boolean jj_3R_8() {
		if (jj_scan_token(DATEALL_TO)) return true;
		return false;
	}

	private boolean jj_3R_5() {
		if (jj_scan_token(DATEALL_AT)) return true;
		return false;
	}

	private boolean jj_3R_3() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_5()) {
			jj_scanpos = xsp;
			if (jj_3_6()) return true;
		}
		return false;
	}

	private boolean jj_3R_7() {
		if (jj_scan_token(DATEALL_FROM)) return true;
		return false;
	}

	private boolean jj_3_9() {
		if (jj_scan_token(WORDS_TEXT_IN)) return true;
		return false;
	}

	private boolean jj_3R_2() {
		if (jj_3R_7()) return true;
		if (jj_3R_8()) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_4()) jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3_8() {
		if (jj_scan_token(OR_TEXT_IN)) return true;
		return false;
	}

	private boolean jj_3_4() {
		if (jj_3R_4()) return true;
		return false;
	}

	private boolean jj_3R_4() {
		if (jj_scan_token(WORDS_TEXT_IN)) return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_8()) jj_scanpos = xsp;
		xsp = jj_scanpos;
		if (jj_3_9()) jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_6() {
		if (jj_scan_token(WORDS_TEXTAT_IN)) return true;
		if (jj_scan_token(CDOUBLE_TEXTAT_IN)) return true;
		return false;
	}

	private boolean jj_3_6() {
		if (jj_3R_6()) return true;
		if (jj_3R_5()) return true;
		return false;
	}

	/** Generated Token Manager. */
	public GraphicalTimeLineTokenManager token_source;
	SimpleCharStream jj_input_stream;
	/** Current token. */
	public Token token;
	/** Next token. */
	public Token jj_nt;
	private int jj_ntk;
	private Token jj_scanpos, jj_lastpos;
	private int jj_la;
	private int jj_gen;
	final private int[] jj_la1 = new int[0];
	static private int[] jj_la1_0;
	static private int[] jj_la1_1;
	static {
		jj_la1_init_0();
		jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
		jj_la1_0 = new int[] {};
	}
	private static void jj_la1_init_1() {
		jj_la1_1 = new int[] {};
	}
	final private JJCalls[] jj_2_rtns = new JJCalls[9];
	private boolean jj_rescan = false;
	private int jj_gc = 0;

	/** Constructor with InputStream. */
	public GraphicalTimeLine(java.io.InputStream stream) {
		this(stream, null);
	}
	/** Constructor with InputStream and supplied encoding */
	public GraphicalTimeLine(java.io.InputStream stream, String encoding) {
		try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
		token_source = new GraphicalTimeLineTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 0; i++) jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream) {
		ReInit(stream, null);
	}
	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream, String encoding) {
		try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 0; i++) jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}

	/** Constructor. */
	public GraphicalTimeLine(java.io.Reader stream) {
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new GraphicalTimeLineTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 0; i++) jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 0; i++) jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}

	/** Constructor with generated Token Manager. */
	public GraphicalTimeLine(GraphicalTimeLineTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 0; i++) jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	public void ReInit(GraphicalTimeLineTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 0; i++) jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}

	private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null) token = token.next;
		else token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			if (++jj_gc > 100) {
				jj_gc = 0;
				for (int i = 0; i < jj_2_rtns.length; i++) {
					JJCalls c = jj_2_rtns[i];
					while (c != null) {
						if (c.gen < jj_gen) c.first = null;
						c = c.next;
					}
				}
			}
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	static private final class LookaheadSuccess extends java.lang.Error { }
	final private LookaheadSuccess jj_ls = new LookaheadSuccess();
	private boolean jj_scan_token(int kind) {
		if (jj_scanpos == jj_lastpos) {
			jj_la--;
			if (jj_scanpos.next == null) {
				jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
			} else {
				jj_lastpos = jj_scanpos = jj_scanpos.next;
			}
		} else {
			jj_scanpos = jj_scanpos.next;
		}
		if (jj_rescan) {
			int i = 0; Token tok = token;
			while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
			if (tok != null) jj_add_error_token(kind, i);
		}
		if (jj_scanpos.kind != kind) return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
		return false;
	}


	/** Get the next Token. */
	final public Token getNextToken() {
		if (token.next != null) token = token.next;
		else token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	/** Get the specific Token. */
	final public Token getToken(int index) {
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null) t = t.next;
			else t = t.next = token_source.getNextToken();
		}
		return t;
	}

	private int jj_ntk() {
		if ((jj_nt=token.next) == null)
			return (jj_ntk = (token.next=token_source.getNextToken()).kind);
		else
			return (jj_ntk = jj_nt.kind);
	}

	private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
	private int[] jj_expentry;
	private int jj_kind = -1;
	private int[] jj_lasttokens = new int[100];
	private int jj_endpos;

	private void jj_add_error_token(int kind, int pos) {
		if (pos >= 100) return;
		if (pos == jj_endpos + 1) {
			jj_lasttokens[jj_endpos++] = kind;
		} else if (jj_endpos != 0) {
			jj_expentry = new int[jj_endpos];
			for (int i = 0; i < jj_endpos; i++) {
				jj_expentry[i] = jj_lasttokens[i];
			}
			jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
				int[] oldentry = (int[])(it.next());
				if (oldentry.length == jj_expentry.length) {
					for (int i = 0; i < jj_expentry.length; i++) {
						if (oldentry[i] != jj_expentry[i]) {
							continue jj_entries_loop;
						}
					}
					jj_expentries.add(jj_expentry);
					break jj_entries_loop;
				}
			}
			if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
		}
	}

	/** Generate ParseException. */
	public ParseException generateParseException() {
		jj_expentries.clear();
		boolean[] la1tokens = new boolean[51];
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 0; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1<<j)) != 0) {
						la1tokens[j] = true;
					}
					if ((jj_la1_1[i] & (1<<j)) != 0) {
						la1tokens[32+j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 51; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.add(jj_expentry);
			}
		}
		jj_endpos = 0;
		jj_rescan_token();
		jj_add_error_token(0, 0);
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = jj_expentries.get(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	/** Enable tracing. */
	final public void enable_tracing() {
	}

	/** Disable tracing. */
	final public void disable_tracing() {
	}

	private void jj_rescan_token() {
		jj_rescan = true;
		for (int i = 0; i < 9; i++) {
			try {
				JJCalls p = jj_2_rtns[i];
				do {
					if (p.gen > jj_gen) {
						jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
						switch (i) {
						case 0: jj_3_1(); break;
						case 1: jj_3_2(); break;
						case 2: jj_3_3(); break;
						case 3: jj_3_4(); break;
						case 4: jj_3_5(); break;
						case 5: jj_3_6(); break;
						case 6: jj_3_7(); break;
						case 7: jj_3_8(); break;
						case 8: jj_3_9(); break;
						}
					}
					p = p.next;
				} while (p != null);
			} catch(LookaheadSuccess ls) { }
		}
		jj_rescan = false;
	}

	private void jj_save(int index, int xla) {
		JJCalls p = jj_2_rtns[index];
		while (p.gen > jj_gen) {
			if (p.next == null) { p = p.next = new JJCalls(); break; }
			p = p.next;
		}
		p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
	}

	static final class JJCalls {
		int gen;
		Token first;
		int arg;
		JJCalls next;
	}

}
