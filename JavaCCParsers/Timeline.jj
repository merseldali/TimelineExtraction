/* Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */
//| <SHIFT: ("shift:("(.)+,(.)+")")>

options
{
    LOOKAHEAD=3;
	IGNORE_CASE=true;
}

PARSER_BEGIN(EasyTimeLine)

/** Simple brace matcher. */
public class EasyTimeLine {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    EasyTimeLine parser = new EasyTimeLine(System.in);
    parser.Start();
  }

}


PARSER_END(EasyTimeLine)

SKIP :
{
  " "
}

TOKEN :
{
  <FROM: "from:">
| <TILL: "till:">
| <TEXT: "text:">
| <PERIOD: "period">
| <EQUALS: "=">
| <YEAR: ("-")?(["0"-"9"])+>
| <WORDS: (["a"-"z"])+>
| <SHIFT: ("shift:("(["0"-"9"])+","(["0"-"9"])+")")>
| <EOL: "\n" | "\r" | "\r\n">
}


/** Root production. */
void Start() :
{
}
{
	(
	perioddetect()
	(fromtilltext())*
	<EOF>
	)
	|
	(
	(fromtilltext())*
	perioddetect()
	(fromtilltext())*
	<EOF>
	)
	
}

void perioddetect() :
{
	Token t;
}
{
	<PERIOD>
	<EQUALS>
	<FROM>
	t = <YEAR>
	{ System.out.println("Start = " + Integer.parseInt(t.image)); }
	<TILL>
	t = <YEAR>
	{ System.out.println("End = " + Integer.parseInt(t.image)); }
	(<EOL>)*
}

void fromtilltext() :
{
	Token t;
}
{
	<FROM>
	t = <YEAR>
	{ System.out.println(Integer.parseInt(t.image)); }
	<TILL>
	t = <YEAR>
	{ System.out.println(Integer.parseInt(t.image)); }
	(<SHIFT>)?
	<TEXT>
	t = <WORDS>
	{ System.out.println(new String(t.image)); }
	(<EOL>)?
}