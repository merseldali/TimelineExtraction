/* Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */
//| <SHIFT: ("shift:("(.)+,(.)+")")>

options
{
	IGNORE_CASE=true;
	LOOKAHEAD=1;
	FORCE_LA_CHECK=false;
}

PARSER_BEGIN(EasyTimeLine)

/** Simple brace matcher. */
public class EasyTimeLine {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    EasyTimeLine parser = new EasyTimeLine(System.in);
    parser.Start();
  }

}


PARSER_END(EasyTimeLine)
SKIP :
{
	<"Period"(" ")*("=")> : TIMELINE_START
|	<"from"(" ")*(":")> : TIMELINE_DATA
|	<  ~[] >
}

<TIMELINE_START> SKIP :
{
	<"\n" | "\r" | "\r\n"> : DEFAULT
|	<" ">
}

<TIMELINE_START> TOKEN :
{
  <FROM: "from:">
| <TILL: "till:">
| <YEAR: (("-")?(["0"-"9"])+) | "start" | "end">
}

<TIMELINE_DATA> SKIP :
{
  	<"\n" | "\r" | "\r\n"> : DEFAULT
|	<" ">
|	< ~["0"-"9"] >
}

<TIMELINE_DATA> TOKEN :
{
  <TILL2: "till:">
| <TEXT2: "text:">
| <YEAR2: (("-")?(["0"-"9"]){1,10}(".")?(["0"-"9"]){1,10}) | "start" | "end" | "0">
| <YEARU: ["0"-"9"]>
| <WORDS2: (("[[")(["a"-"z" , "~" , "#", " "])+("|")?(["a"-"z" , "~" ,"#", " "])+("]]"))>
| <SHIFT2: ("shift:("("$" | "-")?(["0"-"9","a"-"z"])+","("$" | "-")?(["0"-"9","a"-"z"])+")")>
| <FONTSIZE2: ("fontsize:"(["0"-"9","a"-"z", "A"-"Z"])+)>
}


/** Root production. */
void Start() :
{
}
{
	(
	(perioddetect())
	(fromtilltext())+
	)+	
}

void perioddetect() :
{
	Token t;
}
{
	<FROM>
	t = <YEAR>
	{ System.out.println("Start = " + new String(t.image)); }
	<TILL>
	t = <YEAR>
	{ System.out.println("End = " + Integer.parseInt(t.image)); }
}

void fromtilltext() :
{
	Token t;
}
{
	t = <YEAR2>
	{ System.out.println(new String(t.image)); }
	<TILL2>
	t = <YEAR2>
	{ System.out.println(new String(t.image)); }
	(<SHIFT2>)?
	(<TEXT2>
	t = <WORDS2>
	{ System.out.println(new String(t.image)); })?
	(<FONTSIZE2>)?
}